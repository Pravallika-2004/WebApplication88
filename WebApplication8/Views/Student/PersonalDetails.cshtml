@model WebApplication8.Models.PersonalDetailsTbl

@{
    ViewBag.Title = "Personal Details";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            margin: 0;
            padding: 0;
            min-height: 100vh;
            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            overflow-x: hidden;
        }

        .container {
            max-width: 1400px;
            margin: 40px auto;
            padding: 30px;
            background: #ffffff;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.5s ease-in-out;
        }

        h2 {
            color: #dc3545;
            text-align: center;
            margin-bottom: 30px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        h3.card-title {
            color: #dc3545;
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 20px;
            text-align: center;
        }

        .card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
            background: #f8f9fa;
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card-body {
            padding: 20px;
        }

        .form-label {
            font-weight: 600;
            color: #dc3545;
            font-size: 0.9rem;
            margin-bottom: 5px;
            transition: color 0.3s ease;
        }

        .form-control, .form-select {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 10px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }

        .form-control:focus, .form-select:focus {
            border-color: #dc3545;
            box-shadow: 0 0 10px rgba(220, 53, 69, 0.2);
            outline: none;
        }

        .form-control[readonly] {
            background: #e9ecef;
            cursor: not-allowed;
            opacity: 0.8;
        }

        .checkbox-group {
            margin-bottom: 10px;
            padding: 8px;
            background: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
        }

        .checkbox-group label {
            margin-left: 5px;
            margin-right: 10px;
            font-size: 0.85rem;
            color: #333;
        }

        .checkbox-group input[type="checkbox"] {
            accent-color: #dc3545;
        }

        .health-history-item {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }

        .health-history-item input {
            flex-grow: 1;
            margin-right: 10px;
        }

        .btn-primary, .btn-success, .btn-secondary, .btn-danger {
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: all 0.3s ease;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
        }

        .btn-primary {
            background: linear-gradient(90deg, #007bff, #0056b3);
        }

        .btn-primary:hover {
            background: linear-gradient(90deg, #0056b3, #007bff);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 123, 255, 0.3);
        }

        .btn-success {
            background: linear-gradient(90deg, #dc3545, #c82333);
        }

        .btn-success:hover {
            background: linear-gradient(90deg, #c82333, #dc3545);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(220, 53, 69, 0.3);
        }

        .btn-secondary {
            background: linear-gradient(90deg, #6c757d, #5a6268);
        }

        .btn-secondary:hover {
            background: linear-gradient(90deg, #5a6268, #6c757d);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(108, 117, 125, 0.3);
        }

        .btn-danger {
            background: linear-gradient(90deg, #dc3545, #c82333);
        }

        .btn-danger:hover {
            background: linear-gradient(90deg, #c82333, #dc3545);
            transform: translateY(-2px);
        }

        .form-group {
            margin-bottom: 20px;
            animation: slideIn 0.5s ease;
        }

        .form-group-compact {
            margin-bottom: 12px;
        }

        .row {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }

        .col-md-3 {
            flex: 1;
            min-width: 200px;
            max-width: 24%;
        }

        .invalid-feedback {
            display: none;
            color: #dc3545;
            font-size: 0.85rem;
            margin-top: 5px;
        }

        .form-control:invalid,
        .form-select:invalid {
            border-color: #dc3545;
        }

        .form-control:invalid:focus,
        .form-select:invalid:focus {
            box-shadow: 0 0 10px rgba(220, 53, 69, 0.2);
        }

        .form-control:invalid ~ .invalid-feedback,
        .form-select:invalid ~ .invalid-feedback {
            display: block;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @@keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(-10px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @@media (max-width: 768px) {
            .col-md-3 {
                min-width: 100%;
                max-width: 100%;
            }
            .checkbox-group {
                flex-direction: column;
                align-items: flex-start;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Student Personal Details</h2>

        @using (Html.BeginForm("SubmitPersonalDetails", "Student", FormMethod.Post, new { @class = "personal-details-form", id = "personalDetailsForm", novalidate = "novalidate" }))
        {
            @Html.AntiForgeryToken()

            <!-- Student Details Card -->
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title">Student Details</h3>
                    <div class="row">
                        <!-- Column 1 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.EnrollmentNo, "Enrollment No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.EnrollmentNo, new { @class = "form-control", @readonly = "readonly", required = "required", @Value = Model?.EnrollmentNo ?? "" })
                                <div class="invalid-feedback">Please provide an Enrollment Number.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.StudentName, "Student Name", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.StudentName, new { @class = "form-control", required = "required", @Value = Model?.StudentName ?? "" })
                                <div class="invalid-feedback">Please provide the student's name.</div>
                            </div>
                            <div class="form-group">
                                <label for="Student_Name__as_per_10th_grade_sheet_" class="form-label">
                                    Student Name <span class="text-muted">(as per 10th grade sheet)</span>
                                </label>
                                <input type="text" class="form-control" name="Student_Name__as_per_10th_grade_sheet_" id="Student_Name__as_per_10th_grade_sheet_"
                                       value="@(Model?.Student_Name__as_per_10th_grade_sheet_ ?? "")" placeholder="Enter name from 10th grade certificate" required />
                                <div class="invalid-feedback">Please provide the student's name as per the 10th grade certificate.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Gender, new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.Gender, new SelectList(new[] { "Male", "Female", "Other" }, Model?.Gender), "-- Select Gender --", new { @class = "form-select", required = "required" })
                                <div class="invalid-feedback">Please select a gender.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.StudentEmail, "Student Email", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.StudentEmail, new { @class = "form-control", type = "email", required = "required", @Value = Model?.StudentEmail ?? "", pattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$" })
                                <div class="invalid-feedback">Please provide a valid email address.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.PresentResidentialAddress, "Present Residential Address", new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.PresentResidentialAddress, new { @class = "form-control", rows = "4", required = "required", @Value = Model?.PresentResidentialAddress ?? "" })
                                <div class="invalid-feedback">Please provide the present residential address.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.StudentAddress_Communication, "Student Address Communication", new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.StudentAddress_Communication, new { @class = "form-control", rows = "4", required = "required", @Value = Model?.StudentAddress_Communication ?? "" })
                                <div class="invalid-feedback">Please provide the communication address.</div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Allergy Names</label>
                                <div class="checkbox-group" id="allergyNamesGroup">
                                    @foreach (var allergy in new[] { "substance allergy", "drug allergy" })
                                    {
                                        <div>
                                            <input type="checkbox" name="AllergyNames" value="@allergy" @(Model != null && Model.AllergyNames != null && Model.AllergyNames.Contains(allergy) ? "checked" : "") class="allergy-checkbox" />
                                            <label>@allergy</label>
                                        </div>
                                    }
                                </div>
                                <div class="invalid-feedback" id="allergyNamesError">Please select at least one allergy type.</div>
                            </div>
                        </div>

                        <!-- Column 2 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.StudentContactNo, "Student Contact No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.StudentContactNo, new { @class = "form-control", required = "required", @Value = Model?.StudentContactNo ?? "", pattern = @"^\d{10}$", title = "Contact number must be exactly 10 digits." })
                                <div class="invalid-feedback">Please provide a valid 10-digit contact number.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.DateOfBirth, "DOB", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.DateOfBirth, new
                                {
                                    @class = "form-control",
                                    @type = "date",
                                    @id = "dob",
                                    @Value = Model != null && Model.DateOfBirth.HasValue ? Model.DateOfBirth.Value.ToString("yyyy-MM-dd") : "",
                                    required = "required",
                                    max = DateTime.Today.ToString("yyyy-MM-dd")
                                })
                                <div class="invalid-feedback">Please provide a valid date of birth (not in the future).</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.AdmitCardNo, "Admit Card No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.AdmitCardNo, new { @class = "form-control", required = "required", @Value = Model?.AdmitCardNo ?? "" })
                                <div class="invalid-feedback">Please provide the admit card number.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.AdmissionNo, "Admission No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.AdmissionNo, new { @class = "form-control", required = "required", @Value = Model?.AdmissionNo ?? "" })
                                <div class="invalid-feedback">Please provide the admission number.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Nationality, new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.Nationality, new SelectList(new List<string>
                                {
                                    "Indian", "Anglo-Indian", "Assamese", "Bengali", "Bhili", "Bihari", "Bodo",
                                    "Dogri", "Gondi", "Gorkha", "Gujarati", "Kannadiga", "Kashmiri", "Konkani",
                                    "Ladakhi", "Maithili", "Malayali", "Manipuri", "Marathi", "Mizo", "Naga",
                                    "Odia", "Punjabi", "Rajasthani", "Santhali", "Sindhi", "Tamil", "Telugu",
                                    "Tripuri", "Tuluva", "Urdu-speaking"
                                }, Model?.Nationality), "-- Select Nationality --", new { @class = "form-control", required = "required" })
                                <div class="invalid-feedback">Please select a nationality.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Caste, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Caste, new { @class = "form-control", required = "required", @Value = Model?.Caste ?? "" })
                                <div class="invalid-feedback">Please provide the caste.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.AadharNumber, "Aadhar Number", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.AadharNumber, new { @class = "form-control", required = "required", @Value = Model?.AadharNumber ?? "", pattern = @"^\d{12}$", title = "Aadhar number must be exactly 12 digits." })
                                <div class="invalid-feedback">Please provide a valid 12-digit Aadhar number.</div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Past Health History</label>
                                <div id="healthHistoryContainer" class="mb-2">
                                    @if (!string.IsNullOrEmpty(Model?.Past_Health_History))
                                    {
                                        var conditions = Model.Past_Health_History.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                                        foreach (var condition in conditions)
                                        {
                                            <div class="health-history-item">
                                                <input type="text" name="Past_Health_History[]" class="form-control health-history-input" value="@condition" required />
                                                <button type="button" class="btn btn-danger btn-sm remove-health">Remove</button>
                                            </div>
                                        }
                                    }
                                </div>
                                <button type="button" id="addHealthHistory" class="btn btn-primary btn-sm mt-1 mb-2">Add New</button>
                                <div class="invalid-feedback" id="healthHistoryError">Please add at least one past health history entry.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.History_Of_Substance_Allergy, "History of Substance Allergy", new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.History_Of_Substance_Allergy, new { @class = "form-control", rows = "3", required = "required", @Value = Model?.History_Of_Substance_Allergy ?? "" })
                                <div class="invalid-feedback">Please provide details of substance allergy history.</div>
                            </div>
                        </div>

                        <!-- Column 3 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.RegistrationNo, "Registration No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.RegistrationNo, new { @class = "form-control", required = "required", @Value = Model?.RegistrationNo ?? "" })
                                <div class="invalid-feedback">Please provide the registration number.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.AdmissionYear, "Admission Year", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.AdmissionYear, new { @class = "form-control", type = "number", required = "required", @Value = Model?.AdmissionYear ?? 2025, min = "2000", max = "2025" })
                                <div class="invalid-feedback">Please provide a valid admission year (2000-2025).</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Program, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Program, new { @class = "form-control", @readonly = "readonly", required = "required", @Value = Model?.Program ?? "" })
                                <div class="invalid-feedback">Please provide the program name.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Branch, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Branch, new { @class = "form-control", required = "required", @Value = Model?.Branch ?? "" })
                                <div class="invalid-feedback">Please provide the branch.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Year, "Year", new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.Year, new SelectList(new[] { "1", "2", "3", "4" }, Model?.Year), "-- Select Year --", new { @class = "form-control", required = "required" })
                                <div class="invalid-feedback">Please select the year.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.stu_whatsappnum, "Student WhatsApp No", new { @class = "form-label", @title = "Student WhatsApp Number" })
                                @Html.TextBoxFor(m => m.stu_whatsappnum, new { @class = "form-control", required = "required", @Value = Model?.stu_whatsappnum ?? "", pattern = @"^\d{10}$", title = "WhatsApp number must be exactly 10 digits." })
                                <div class="invalid-feedback">Please provide a valid 10-digit WhatsApp number.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.University, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.University, new { @class = "form-control", required = "required", @Value = Model?.University ?? "" })
                                <div class="invalid-feedback">Please provide the university name.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Details_Of_Past_Health_History, "Details Of Past Health History", new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.Details_Of_Past_Health_History, new { @class = "form-control", rows = "3", required = "required", @Value = Model?.Details_Of_Past_Health_History ?? "" })
                                <div class="invalid-feedback">Please provide details of past health history.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.History_of_drug_allergy, "History of Drug Allergy", new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.History_of_drug_allergy, new { @class = "form-control", rows = "3", required = "required", @Value = Model?.History_of_drug_allergy ?? "" })
                                <div class="invalid-feedback">Please provide details of drug allergy history.</div>
                            </div>
                        </div>

                        <!-- Column 4 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.RoomNo, "Room No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.RoomNo, new { @class = "form-control", required = "required", @Value = Model?.RoomNo ?? "" })
                                <div class="invalid-feedback">Please provide the room number.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Age, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Age, new
                                {
                                    @class = "form-control",
                                    type = "number",
                                    @readonly = "readonly",
                                    id = "age",
                                    @Value = Model?.Age ?? 0,
                                    required = "required",
                                    min = "1",
                                    max = "100"
                                })
                                <div class="invalid-feedback">Age must be between 1 and 100.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Height, new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.Height, new SelectList(GenerateHeightOptions(), "Value", "Text", Model?.Height), "-- Select Height --", new { @class = "form-control", required = "required" })
                                <div class="invalid-feedback">Please select the height.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Weight, new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.Weight, new SelectList(GenerateWeightOptions(), "Value", "Text", Model?.Weight), "-- Select Weight --", new { @class = "form-control", required = "required" })
                                <div class="invalid-feedback">Please select the weight.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Religion, new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.Religion, new SelectList(new List<string>
                                {
                                    "Hinduism", "Islam", "Christianity", "Sikhism", "Buddhism", "Jainism",
                                    "Zoroastrianism (Parsi)", "Judaism", "Bahá'í Faith", "Animism / Tribal Religions",
                                    "Atheist / No Religion"
                                }, Model?.Religion), "-- Select Religion --", new { @class = "form-control", required = "required" })
                                <div class="invalid-feedback">Please select a religion.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.BloodGroup, "Blood Group", new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.BloodGroup, new SelectList(new[] { "A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-" }, Model?.BloodGroup), "-- Select Blood Group --", new { @class = "form-select", required = "required" })
                                <div class="invalid-feedback">Please select a blood group.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Batch, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Batch, new { @class = "form-control", required = "required", @Value = Model?.Batch ?? "" })
                                <div class="invalid-feedback">Please provide the batch.</div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Work Experience</label>
                                <div class="checkbox-group" id="workExperienceGroup">
                                    @foreach (var experience in new[] { "1 year", "2 years", "3 years", "5 years" })
                                    {
                                        <div>
                                            <input type="checkbox" name="Work_Experience" value="@experience" @(Model != null && Model.Work_Experience != null && Model.Work_Experience.Contains(experience) ? "checked" : "") class="work-experience-checkbox" />
                                            <label>@experience</label>
                                        </div>
                                    }
                                </div>
                                <div class="invalid-feedback" id="workExperienceError">Please select at least one work experience option.</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Parent Details Card -->
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title">Parent Details</h3>
                    <div class="row">
                        <!-- Column 1 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.FathersName, "Father Name", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.FathersName, new { @class = "form-control", @readonly = "readonly", required = "required", @Value = Model?.FathersName ?? "" })
                                <div class="invalid-feedback">Please provide the father's name.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.MothersName, "Mother Name", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.MothersName, new { @class = "form-control", @readonly = "readonly", required = "required", @Value = Model?.MothersName ?? "" })
                                <div class="invalid-feedback">Please provide the mother's name.</div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Parents Income Category</label>
                                <div class="checkbox-group" id="parentsIncomeGroup">
                                    @foreach (var income in new[] { "Below 5 Lacs", "Below 8 Lacs", "Below 10 Lacs", "Above 10 Lacs" })
                                    {
                                        <div>
                                            <input type="checkbox" name="Parents_Income_Category" value="@income" @(Model != null && Model.Parents_Income_Category != null && Model.Parents_Income_Category.Contains(income) ? "checked" : "") class="income-checkbox" />
                                            <label>@income</label>
                                        </div>
                                    }
                                </div>
                                <div class="invalid-feedback" id="parentsIncomeError">Please select at least one income category.</div>
                            </div>
                        </div>

                        <!-- Column 2 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Father_Mobile_No, "Father's Mobile No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Father_Mobile_No, new { @class = "form-control", required = "required", @Value = Model?.Father_Mobile_No ?? "", pattern = @"^\d{10}$", title = "Mobile number must be exactly 10 digits." })
                                <div class="invalid-feedback">Please provide a valid 10-digit mobile number for the father.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Mother_Mobile_No, "Mother's Mobile No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Mother_Mobile_No, new { @class = "form-control", required = "required", @Value = Model?.Mother_Mobile_No ?? "", pattern = @"^\d{10}$", title = "Mobile number must be exactly 10 digits." })
                                <div class="invalid-feedback">Please provide a valid 10-digit mobile number for the mother.</div>
                            </div>
                        </div>

                        <!-- Column 3 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.FathersEmail, "Father's Email", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.FathersEmail, new { @class = "form-control", type = "email", required = "required", @Value = Model?.FathersEmail ?? "", pattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$" })
                                <div class="invalid-feedback">Please provide a valid email address for the father.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.MothersEmail, "Mother's Email", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.MothersEmail, new { @class = "form-control", type = "email", required = "required", @Value = Model?.MothersEmail ?? "", pattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$" })
                                <div class="invalid-feedback">Please provide a valid email address for the mother.</div>
                            </div>
                        </div>

                        <!-- Column 4 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Father_Age, "Father's Age", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Father_Age, new { @class = "form-control", type = "number", required = "required", @Value = Model?.Father_Age ?? 0, min = "18", max = "100" })
                                <div class="invalid-feedback">Please provide a valid age for the father (18-100).</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Mother_Age, "Mother's Age", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Mother_Age, new { @class = "form-control", type = "number", required = "required", @Value = Model?.Mother_Age ?? 0, min = "18", max = "100" })
                                <div class="invalid-feedback">Please provide a valid age for the mother (18-100).</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Local Guardian Details Card -->
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title">Guardian Details</h3>
                    <div class="row">
                        <!-- Column 1 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianName, "Guardian Name", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.LocalGuardianName, new { @class = "form-control", required = "required", @Value = Model?.LocalGuardianName ?? "" })
                                <div class="invalid-feedback">Please provide the guardian's name.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianOccupation, "Guardian's Occupation", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.LocalGuardianOccupation, new { @class = "form-control", required = "required", @Value = Model?.LocalGuardianOccupation ?? "" })
                                <div class="invalid-feedback">Please provide the guardian's occupation.</div>
                            </div>
                        </div>

                        <!-- Column 2 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianContactNo, "Guardian's Contact No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.LocalGuardianContactNo, new { @class = "form-control", required = "required", @Value = Model?.LocalGuardianContactNo ?? "", pattern = @"^\d{10}$", title = "Contact number must be exactly 10 digits." })
                                <div class="invalid-feedback">Please provide a valid 10-digit contact number for the guardian.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianAge, "Guardian's Age", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.LocalGuardianAge, new { @class = "form-control", type = "number", required = "required", @Value = Model?.LocalGuardianAge ?? 0, min = "18", max = "100" })
                                <div class="invalid-feedback">Please provide a valid age for the guardian (18-100).</div>
                            </div>
                        </div>

                        <!-- Column 3 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianEmail, "Guardian's Email", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.LocalGuardianEmail, new { @class = "form-control", type = "email", required = "required", @Value = Model?.LocalGuardianEmail ?? "", pattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$" })
                                <div class="invalid-feedback">Please provide a valid email address for the guardian.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianResidentialAddress, "Guardian's Residential Address", new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.LocalGuardianResidentialAddress, new { @class = "form-control", rows = "4", required = "required", @Value = Model?.LocalGuardianResidentialAddress ?? "" })
                                <div class="invalid-feedback">Please provide the guardian's residential address.</div>
                            </div>
                        </div>

                        <!-- Column 4 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianRelationWithStudent, "Guardian's Relation With Student", new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.LocalGuardianRelationWithStudent, new SelectList(new[]
                                {
                                    "Father", "Mother", "Brother", "Sister", "Uncle", "Aunt", "Cousin", "Grandfather", "Grandmother", "Other"
                                }, Model?.LocalGuardianRelationWithStudent), "-- Select Relation --", new { @class = "form-control", required = "required" })
                                <div class="invalid-feedback">Please select the guardian's relation with the student.</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="text-center mt-4">
                <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#confirmSubmitModal">Save Personal Details</button>
                <a href="@Url.Action("Index", "Student")" class="btn btn-secondary ms-2">Back to Dashboard</a>
            </div>
        }

        <!-- Confirmation Modal -->
        <div class="modal fade" id="confirmSubmitModal" tabindex="-1" aria-labelledby="confirmSubmitModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="confirmSubmitModalLabel">Confirm Submission</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        Please recheck your details before submitting. Are you sure you want to save your personal details?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-success" id="confirmSubmit">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Add new health history input
        document.getElementById('addHealthHistory').addEventListener('click', function () {
            const container = document.getElementById('healthHistoryContainer');
            const newItem = document.createElement('div');
            newItem.className = 'health-history-item';
            newItem.innerHTML = `
                    <input type="text" name="Past_Health_History[]" class="form-control health-history-input" required />
                    <button type="button" class="btn btn-danger btn-sm remove-health">Remove</button>
                `;
            container.appendChild(newItem);
            validateHealthHistory();
        });

        // Remove health history input
        document.addEventListener('click', function (e) {
            if (e.target.classList.contains('remove-health')) {
                e.target.parentElement.remove();
                validateHealthHistory();
            }
        });

        // Validate health history inputs
        function validateHealthHistory() {
            const container = document.getElementById('healthHistoryContainer');
            const error = document.getElementById('healthHistoryError');
            const inputs = container.querySelectorAll('.health-history-input');
            if (inputs.length === 0) {
                error.style.display = 'block';
                container.classList.add('is-invalid');
            } else {
                error.style.display = 'none';
                container.classList.remove('is-invalid');
            }
        }

        // Validate checkbox groups
        function validateCheckboxes(groupId, checkboxClass, errorId) {
            const group = document.getElementById(groupId);
            const checkboxes = group.querySelectorAll(`.${checkboxClass}`);
            const error = document.getElementById(errorId);
            const isChecked = Array.from(checkboxes).some(cb => cb.checked);
            if (!isChecked) {
                error.style.display = 'block';
                group.classList.add('is-invalid');
            } else {
                error.style.display = 'none';
                group.classList.remove('is-invalid');
            }
        }

        // Handle checkbox groups change
        document.querySelectorAll('.checkbox-group input[type="checkbox"]').forEach(group => {
            group.addEventListener('change', function () {
                const name = this.name;
                const checkboxes = document.querySelectorAll(`input[name="${name}"]`);
                let selectedValues = [];

                checkboxes.forEach(cb => {
                    if (cb.checked) {
                        selectedValues.push(cb.value);
                    }
                });

                const inputField = document.querySelector(`input[name="${name}"]`);
                if (inputField) {
                    inputField.setAttribute('value', selectedValues.join(','));
                }

                // Validate on change
                if (name === 'AllergyNames') {
                    validateCheckboxes('allergyNamesGroup', 'allergy-checkbox', 'allergyNamesError');
                } else if (name === 'Work_Experience') {
                    validateCheckboxes('workExperienceGroup', 'work-experience-checkbox', 'workExperienceError');
                } else if (name === 'Parents_Income_Category') {
                    validateCheckboxes('parentsIncomeGroup', 'income-checkbox', 'parentsIncomeError');
                }
            });
        });

        // Form submission validation
        document.getElementById('confirmSubmit').addEventListener('click', function () {
            const form = document.getElementById('personalDetailsForm');
            validateHealthHistory();
            validateCheckboxes('allergyNamesGroup', 'allergy-checkbox', 'allergyNamesError');
            validateCheckboxes('workExperienceGroup', 'work-experience-checkbox', 'workExperienceError');
            validateCheckboxes('parentsIncomeGroup', 'income-checkbox', 'parentsIncomeError');

            if (form.checkValidity() && !document.querySelector('#healthHistoryError').style.display &&
                !document.querySelector('#allergyNamesError').style.display &&
                !document.querySelector('#workExperienceError').style.display &&
                !document.querySelector('#parentsIncomeError').style.display) {
                form.submit();
            } else {
                form.reportValidity();
            }
        });

        // Age calculation script
        document.addEventListener('DOMContentLoaded', function () {
            const dobInput = document.getElementById('dob');
            const ageInput = document.getElementById('age');

            if (!dobInput) {
                console.error('DOB input (id="dob") not found in the DOM');
            }
            if (!ageInput) {
                console.error('Age input (id="age") not found in the DOM');
            }
            if (!dobInput || !ageInput) {
                return;
            }

            function calculateAge(dobString) {
                const dob = new Date(dobString);
                const today = new Date();
                let age = today.getFullYear() - dob.getFullYear();
                const m = today.getMonth() - dob.getMonth();
                if (m < 0 || (m === 0 && today.getDate() < dob.getDate())) {
                    age--;
                }
                return age;
            }

            if (dobInput.value) {
                ageInput.value = calculateAge(dobInput.value);
            }

            dobInput.addEventListener('change', function () {
                if (dobInput.value) {
                    ageInput.value = calculateAge(dobInput.value);
                }
            });

            // Initial validation for checkboxes
            validateCheckboxes('allergyNamesGroup', 'allergy-checkbox', 'allergyNamesError');
            validateCheckboxes('workExperienceGroup', 'work-experience-checkbox', 'workExperienceError');
            validateCheckboxes('parentsIncomeGroup', 'income-checkbox', 'parentsIncomeError');
            validateHealthHistory();
        });
    </script>
</body>
</html>

@functions {
    public List<SelectListItem> GenerateHeightOptions()
    {
        var options = new List<SelectListItem>();
        for (int feet = 4; feet <= 6; feet++)
        {
            for (int inches = 0; inches <= 12; inches++)
            {
                decimal height = feet + inches / 100.0m;
                string display = $"{feet}' {inches}\"";
                options.Add(new SelectListItem { Text = display, Value = height.ToString("0.00") });
            }
        }
        return options;
    }

    public List<SelectListItem> GenerateWeightOptions()
    {
        var options = new List<SelectListItem>();
        for (decimal weight = 40.0m; weight <= 200.0m; weight += 0.5m)
        {
            options.Add(new SelectListItem { Text = weight.ToString("0.0"), Value = weight.ToString("0.0") });
        }
        return options;
    }
}