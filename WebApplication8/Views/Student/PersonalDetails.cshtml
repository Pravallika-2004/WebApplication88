@model WebApplication8.Models.PersonalDetailsTbl

@{
    ViewBag.Title = "Personal Details";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            margin: 0;
            padding: 0;
            min-height: 100vh;
            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            overflow-x: hidden;
        }

        .container {
            max-width: 1400px;
            margin: 40px auto;
            padding: 30px;
            background: #ffffff;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.5s ease-in-out;
        }

        h2 {
            color: #dc3545;
            text-align: center;
            margin-bottom: 30px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        h3.card-title {
            color: #dc3545;
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 20px;
            text-align: center;
        }

        .card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
            background: #f8f9fa;
            transition: transform 0.3s ease;
        }

            .card:hover {
                transform: translateY(-5px);
            }

        .card-body {
            padding: 20px;
        }

        .form-label {
            font-weight: 600;
            color: #dc3545;
            font-size: 0.9rem;
            margin-bottom: 5px;
            transition: color 0.3s ease;
        }

        .form-control, .form-select {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 10px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }

            .form-control:focus, .form-select:focus {
                border-color: #dc3545;
                box-shadow: 0 0 10px rgba(220, 53, 69, 0.2);
                outline: none;
            }

            .form-control[readonly] {
                background: #e9ecef;
                cursor: not-allowed;
                opacity: 0.8;
            }

        .checkbox-group {
            margin-bottom: 10px;
            padding: 8px;
            background: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
        }

        .checkbox-group-no-scroll {
            margin-bottom: 10px;
            padding: 8px;
            /* background: #ffffff;
            border-radius: 15px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);*/
            display: flex;
            flex-wrap: nowrap;
            gap: 104px;
            align-items: center;
            white-space: nowrap;
        }

            .checkbox-group-no-scroll div {
                flex: 1;
                min-width: 0;
            }

            .checkbox-group-no-scroll label,
            .checkbox-group label {
                margin-left: 5px;
                font-size: 0.8rem;
                color: #333;
                white-space: nowrap;
            }

            .checkbox-group-no-scroll input[type="checkbox"],
            .checkbox-group input[type="checkbox"] {
                accent-color: #dc3545;
            }

        .same-address-checkbox {
            margin: 10px 0;
            display: flex;
            align-items: center;
        }

            .same-address-checkbox input {
                margin-right: 5px;
            }

        .health-history-item {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }

            .health-history-item input {
                flex-grow: 1;
                margin-right: 10px;
            }

        .btn-primary, .btn-success, .btn-secondary, .btn-danger {
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: all 0.3s ease;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
        }

        .btn-primary {
            background: linear-gradient(90deg, #007bff, #0056b3);
        }

            .btn-primary:hover {
                background: linear-gradient(90deg, #0056b3, #007bff);
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0, 123, 255, 0.3);
            }

        .btn-success {
            background: linear-gradient(90deg, #dc3545, #c82333);
        }

            .btn-success:hover {
                background: linear-gradient(90deg, #c82333, #dc3545);
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(220, 53, 69, 0.3);
            }

        .btn-secondary {
            background: linear-gradient(90deg, #6c757d, #5a6268);
        }

            .btn-secondary:hover {
                background: linear-gradient(90deg, #5a6268, #6c757d);
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(108, 117, 125, 0.3);
            }

        .btn-danger {
            background: linear-gradient(90deg, #dc3545, #c82333);
        }

            .btn-danger:hover {
                background: linear-gradient(90deg, #c82333, #dc3545);
                transform: translateY(-2px);
            }

        .form-group {
            margin-bottom: 20px;
            animation: slideIn 0.5s ease;
        }

        .form-group-compact {
            margin-bottom: 12px;
        }

        .row {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }

        .col-md-3 {
            flex: 1;
            min-width: 200px;
            max-width: 24%;
        }

        .col-md-6 {
            flex: 1;
            min-width: 300px;
            max-width: 49%;
        }

        .invalid-feedback {
            display: none;
            color: #dc3545;
            font-size: 0.85rem;
            margin-top: 5px;
        }

        .form-control.is-invalid,
        .form-select.is-invalid,
        .checkbox-group.is-invalid,
        .checkbox-group-no-scroll.is-invalid {
            border-color: #dc3545;
        }

            .form-control.is-invalid:focus,
            .form-select.is-invalid:focus {
                box-shadow: 0 0 10px rgba(220, 53, 69, 0.2);
            }

            .form-control.is-invalid ~ .invalid-feedback,
            .form-select.is-invalid ~ .invalid-feedback,
            .checkbox-group.is-invalid ~ .invalid-feedback,
            .checkbox-group-no-scroll.is-invalid ~ .invalid-feedback {
                display: block;
            }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @@keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(-10px);
            }

            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @@media (max-width: 768px) {
            .col-md-3, .col-md-6 {
                min-width: 100%;
                max-width: 100%;
            }

            .checkbox-group-no-scroll {
                flex-wrap: wrap;
                gap: 5px;
            }

                .checkbox-group-no-scroll label {
                    font-size: 0.75rem;
                }
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Student Personal Details</h2>

        @using (Html.BeginForm("SubmitPersonalDetails", "Student", FormMethod.Post, new { @class = "personal-details-form", id = "personalDetailsForm" }))
        {
            @Html.AntiForgeryToken()

            <!-- Student Details Card -->
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title">Student Details</h3>
                    <div class="row">
                        <!-- Row 1: Basic Identification -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.EnrollmentNo, "Enrollment No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.EnrollmentNo, new { @class = "form-control", @readonly = "readonly", required = "required", @Value = Model?.EnrollmentNo ?? "" })
                                <div class="invalid-feedback">Please provide an Enrollment Number.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AdmissionNo, "Admission No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.AdmissionNo, new { @class = "form-control", required = "required", @Value = Model?.AdmissionNo ?? "" })
                                <div class="invalid-feedback">Please provide the admission number.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AdmitCardNo, "Admit Card No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.AdmitCardNo, new { @class = "form-control", required = "required", @Value = Model?.AdmitCardNo ?? "" })
                                <div class="invalid-feedback">Please provide the admit card number.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.RegistrationNo, "Registration No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.RegistrationNo, new { @class = "form-control", required = "required", @Value = Model?.RegistrationNo ?? "" })
                                <div class="invalid-feedback">Please provide the registration number.</div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <!-- Row 2: Personal Details -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.StudentName, "Student Name", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.StudentName, new { @class = "form-control", required = "required", @Value = Model?.StudentName ?? "", pattern = @"^[A-Za-z\s]+$", title = "Name must contain only letters and spaces." })
                                <div class="invalid-feedback">Please provide a valid student name (letters and spaces only).</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="Student_Name__as_per_10th_grade_sheet_" class="form-label">
                                    Student Name <span class="text-muted">(as per 10th grade sheet)</span>
                                </label>
                                <input type="text" class="form-control" name="Student_Name__as_per_10th_grade_sheet_" id="Student_Name__as_per_10th_grade_sheet_"
                                       value="@(Model?.Student_Name__as_per_10th_grade_sheet_ ?? "")" placeholder="Enter name from 10th grade certificate" required
                                       pattern="^[A-Za-z\s]+$" title="Name must contain only letters and spaces." />
                                <div class="invalid-feedback">Please provide a valid name as per the 10th grade certificate (letters and spaces only).</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Gender, new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.Gender, new SelectList(new[] { "Male", "Female", "Other" }, Model?.Gender), "-- Select Gender --", new { @class = "form-select", required = "required" })
                                <div class="invalid-feedback">Please select a gender.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.DateOfBirth, "DOB", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.DateOfBirth, new
                                {
                                    @class = "form-control",
                                    @type = "date",
                                    @id = "dob",
                                    @Value = Model != null && Model.DateOfBirth.HasValue ? Model.DateOfBirth.Value.ToString("yyyy-MM-dd") : "",
                                    required = "required",
                                    max = DateTime.Today.ToString("yyyy-MM-dd")
                                })
                                <div class="invalid-feedback">Please provide a valid date of birth (not in the future).</div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <!-- Row 3: Contact Details -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.StudentEmail, "Student Email", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.StudentEmail, new { @class = "form-control", type = "email", required = "required", @Value = Model?.StudentEmail ?? "", pattern = @"^[a-zA-Z0-9._%+-]+@gmail\.com$" })
                                <div class="invalid-feedback">Please provide a valid Gmail address (e.g., username@gmail.com).</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.StudentContactNo, "Student Contact No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.StudentContactNo, new { @class = "form-control", required = "required", @Value = Model?.StudentContactNo ?? "", pattern = @"^\d{10}$", title = "Contact number must be exactly 10 digits.", maxlength = "10" })
                                <div class="invalid-feedback">Please provide a valid 10-digit contact number.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.stu_whatsappnum, "Student WhatsApp No", new { @class = "form-label", @title = "Student WhatsApp Number" })
                                @Html.TextBoxFor(m => m.stu_whatsappnum, new { @class = "form-control", required = "required", @Value = Model?.stu_whatsappnum ?? "", pattern = @"^\d{10}$", title = "WhatsApp number must be exactly 10 digits.", maxlength = "10" })
                                <div class="invalid-feedback">Please provide a valid 10-digit WhatsApp number.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.RoomNo, "Room No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.RoomNo, new { @class = "form-control", @readonly = "readonly", @value = Model?.RoomNo ?? "null" })
                                <div class="invalid-feedback">Room number is not editable.</div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <!-- Row 4: Academic Details -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Program, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Program, new { @class = "form-control", @readonly = "readonly", required = "required", @Value = Model?.Program ?? "" })
                                <div class="invalid-feedback">Please provide the program name.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Branch, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Branch, new { @class = "form-control", required = "required", @Value = Model?.Branch ?? "" })
                                <div class="invalid-feedback">Please provide the branch.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Year, "Year", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Year, new { @class = "form-control", @readonly = "readonly", @Value = "1" })
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AdmissionYear, "Admission Year", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.AdmissionYear, new { @class = "form-control", type = "number", @readonly = "readonly", required = "required", @Value = Model?.AdmissionYear ?? 2025, min = "2000", max = "2025" })
                                <div class="invalid-feedback">Please provide a valid admission year (2000-2025).</div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <!-- Row 5: Additional Academic -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.University, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.University, new { @class = "form-control", @readonly = "readonly", required = "required", @Value = Model?.University ?? "" })
                                <div class="invalid-feedback">Please provide the university name.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Batch, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Batch, new { @class = "form-control", required = "required", @Value = Model?.Batch ?? "" })
                                <div class="invalid-feedback">Please provide the batch.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Nationality, new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.Nationality, new SelectList(new List<string>
                                {
                                    "Indian", "Anglo-Indian", "Assamese", "Bengali", "Bhili", "Bihari", "Bodo",
                                    "Dogri", "Gondi", "Gorkha", "Gujarati", "Kannadiga", "Kashmiri", "Konkani",
                                    "Ladakhi", "Maithili", "Malayali", "Manipuri", "Marathi", "Mizo", "Naga",
                                    "Odia", "Punjabi", "Rajasthani", "Santhali", "Sindhi", "Tamil", "Telugu",
                                    "Tripuri", "Tuluva", "Urdu-speaking"
                                }, Model?.Nationality), "-- Select Nationality --", new { @class = "form-control", required = "required" })
                                <div class="invalid-feedback">Please select a nationality.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Caste, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Caste, new { @class = "form-control", required = "required", @Value = Model?.Caste ?? "" })
                                <div class="invalid-feedback">Please provide the caste.</div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <!-- Row 6: Physical Attributes -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Age, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Age, new
                                {
                                    @class = "form-control",
                                    type = "number",
                                    @readonly = "readonly",
                                    id = "age",
                                    @Value = Model?.Age ?? 0,
                                    required = "required",
                                    min = "1",
                                    max = "100"
                                })
                                <div class="invalid-feedback">Age must be between 1 and 100.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Height, new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.Height, new SelectList(GenerateHeightOptions(), "Value", "Text", Model?.Height), "-- Select Height --", new { @class = "form-control", required = "required" })
                                <div class="invalid-feedback">Please select the height.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Weight, new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.Weight, new SelectList(GenerateWeightOptions(), "Value", "Text", Model?.Weight), "-- Select Weight --", new { @class = "form-control", required = "required" })
                                <div class="invalid-feedback">Please select the weight.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.BloodGroup, "Blood Group", new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.BloodGroup, new SelectList(new[] { "A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-" }, Model?.BloodGroup), "-- Select Blood Group --", new { @class = "form-select", required = "required" })
                                <div class="invalid-feedback">Please select a blood group.</div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <!-- Row 7: Other Details -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Religion, new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.Religion, new SelectList(new List<string>
                                {
                                    "Hinduism", "Islam", "Christianity", "Sikhism", "Buddhism", "Jainism",
                                    "Zoroastrianism (Parsi)", "Judaism", "Bahá'í Faith", "Animism / Tribal Religions",
                                    "Atheist / No Religion"
                                }, Model?.Religion), "-- Select Religion --", new { @class = "form-control", required = "required" })
                                <div class="invalid-feedback">Please select a religion.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AadharNumber, "Aadhar Number", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.AadharNumber, new { @class = "form-control", required = "required", @Value = Model?.AadharNumber ?? "", pattern = @"^\d{12}$", title = "Aadhar number must be exactly 12 digits.", maxlength = "12" })
                                <div class="invalid-feedback">Please provide a valid 12-digit Aadhar number.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="form-label">Work Experience</label>
                                <div class="checkbox-group-no-scroll" id="workExperienceGroup">
                                    @foreach (var experience in new[] { "1 year", "2 years", "3 years", "5 years" })
                                    {
                                        <div>
                                            <input type="checkbox" name="Work_Experience_Checkbox" value="@experience" @(Model != null && Model.Work_Experience == experience ? "checked" : "") class="work-experience-checkbox" />
                                            <label>@experience</label>
                                        </div>
                                    }
                                </div>
                                @Html.HiddenFor(m => m.Work_Experience, new { @id = "Work_Experience" })
                                <div class="invalid-feedback" id="workExperienceError">Please select exactly one work experience option.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <!-- Empty column to maintain layout -->
                        </div>
                    </div>
                    <div class="row">
                        <!-- Row 8: Residential Address -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.PresentResidentialAddress, "Present Residential Address", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.PresentResidentialAddress, new { @class = "form-control", required = "required", @Value = Model?.PresentResidentialAddress ?? "", id = "PresentResidentialAddress" })
                                <div class="invalid-feedback">Please provide the present residential address.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ResidentialAddress_State, "State", new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.ResidentialAddress_State, new SelectList(new List<string>
                                {
                                    "Andhra Pradesh", "Arunachal Pradesh", "Assam", "Bihar", "Chhattisgarh", "Goa", "Gujarat",
                                    "Haryana", "Himachal Pradesh", "Jharkhand", "Karnataka", "Kerala", "Madhya Pradesh",
                                    "Maharashtra", "Manipur", "Meghalaya", "Mizoram", "Nagaland", "Odisha", "Punjab",
                                    "Rajasthan", "Sikkim", "Tamil Nadu", "Telangana", "Tripura", "Uttar Pradesh",
                                    "Uttarakhand", "West Bengal", "Andaman and Nicobar Islands", "Chandigarh",
                                    "Dadra and Nagar Haveli and Daman and Diu", "Delhi", "Jammu and Kashmir",
                                    "Ladakh", "Lakshadweep", "Puducherry"
                                }, Model?.ResidentialAddress_State), "-- Select State --", new { @class = "form-select", required = "required", id = "ResidentialAddress_State" })
                                <div class="invalid-feedback">Please select a state.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ResidentialAddress_City, "City", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.ResidentialAddress_City, new { @class = "form-control", required = "required", @Value = Model?.ResidentialAddress_City ?? "", id = "ResidentialAddress_City" })
                                <div class="invalid-feedback">Please provide the city.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ResidentialAddress_Pincode, "Pincode", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.ResidentialAddress_Pincode, new { @class = "form-control", required = "required", @Value = Model?.ResidentialAddress_Pincode ?? "", pattern = @"^\d{6}$", title = "Pincode must be exactly 6 digits.", id = "ResidentialAddress_Pincode", maxlength = "6" })
                                <div class="invalid-feedback">Please provide a valid 6-digit pincode.</div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="same-address-checkbox">
                                <input type="checkbox" id="sameAddressCheckbox" @(Model != null && Model.StudentAddress_Communication == Model.PresentResidentialAddress && Model.StudentAddress_Communication_State == Model.ResidentialAddress_State && Model.StudentAddress_Communication_City == Model.ResidentialAddress_City && Model.StudentAddress_Communication_Pincode == Model.ResidentialAddress_Pincode ? "checked" : "") />
                                <label for="sameAddressCheckbox">Same as Residential Address</label>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <!-- Row 9: Communication Address -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.StudentAddress_Communication, "Student Address Communication", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.StudentAddress_Communication, new { @class = "form-control", required = "required", @Value = Model?.StudentAddress_Communication ?? "", id = "StudentAddress_Communication" })
                                <div class="invalid-feedback">Please provide the communication address.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.StudentAddress_Communication_State, "State", new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.StudentAddress_Communication_State, new SelectList(new List<string>
                                {
                                    "Andhra Pradesh", "Arunachal Pradesh", "Assam", "Bihar", "Chhattisgarh", "Goa", "Gujarat",
                                    "Haryana", "Himachal Pradesh", "Jharkhand", "Karnataka", "Kerala", "Madhya Pradesh",
                                    "Maharashtra", "Manipur", "Meghalaya", "Mizoram", "Nagaland", "Odisha", "Punjab",
                                    "Rajasthan", "Sikkim", "Tamil Nadu", "Telangana", "Tripura", "Uttar Pradesh",
                                    "Uttarakhand", "West Bengal", "Andaman and Nicobar Islands", "Chandigarh",
                                    "Dadra and Nagar Haveli and Daman and Diu", "Delhi", "Jammu and Kashmir",
                                    "Ladakh", "Lakshadweep", "Puducherry"
                                }, Model?.StudentAddress_Communication_State), "-- Select State --", new { @class = "form-select", required = "required", id = "StudentAddress_Communication_State" })
                                <div class="invalid-feedback">Please select a state.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.StudentAddress_Communication_City, "City", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.StudentAddress_Communication_City, new { @class = "form-control", required = "required", @Value = Model?.StudentAddress_Communication_City ?? "", id = "StudentAddress_Communication_City" })
                                <div class="invalid-feedback">Please provide the city.</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.StudentAddress_Communication_Pincode, "Pincode", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.StudentAddress_Communication_Pincode, new { @class = "form-control", required = "required", @Value = Model?.StudentAddress_Communication_Pincode ?? "", pattern = @"^\d{6}$", title = "Pincode must be exactly 6 digits.", id = "StudentAddress_Communication_Pincode", maxlength = "6" })
                                <div class="invalid-feedback">Please provide a valid 6-digit pincode.</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Student Health Details Card -->
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title">Student Health Details</h3>
                    <div class="row">
                        <!-- Column 1 -->
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Past Health History</label>
                                <div id="healthHistoryContainer" class="mb-2">
                                    @if (!string.IsNullOrEmpty(Model?.Past_Health_History))
                                    {
                                        var conditions = Model.Past_Health_History.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                                        foreach (var condition in conditions)
                                        {
                                            <div class="health-history-item">
                                                <input type="text" name="Past_Health_History[]" class="form-control health-history-input" value="@condition" />
                                                <button type="button" class="btn btn-danger btn-sm remove-health">Remove</button>
                                            </div>
                                        }
                                    }
                                </div>
                                <button type="button" id="addHealthHistory" class="btn btn-primary btn-sm mt-1 mb-2">Add New</button>
                                <div class="invalid-feedback" id="healthHistoryError">Please add at least one past health history entry if you wish to include health history.</div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Allergy Names</label>
                                <div class="checkbox-group" id="allergyNamesGroup">
                                    @foreach (var allergy in new[] { "substance allergy", "drug allergy" })
                                    {
                                        <div>
                                            <input type="checkbox" name="AllergyNames" value="@allergy" @(Model != null && Model.AllergyNames != null && Model.AllergyNames.Contains(allergy) ? "checked" : "") class="allergy-checkbox" />
                                            <label>@allergy</label>
                                        </div>
                                    }
                                </div>
                                <div class="invalid-feedback" id="allergyNamesError">Please select at least one allergy type if you wish to include allergies.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.History_Of_Substance_Allergy, "History of Substance Allergy", new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.History_Of_Substance_Allergy, new { @class = "form-control", rows = "3", @Value = Model?.History_Of_Substance_Allergy ?? "" })
                                <div class="invalid-feedback">Please provide details of substance allergy history if applicable.</div>
                            </div>
                        </div>
                        <!-- Column 2 -->
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Details_Of_Past_Health_History, "Details Of Past Health History", new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.Details_Of_Past_Health_History, new { @class = "form-control", rows = "3", @Value = Model?.Details_Of_Past_Health_History ?? "" })
                                <div class="invalid-feedback">Please provide details of past health history if applicable.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.History_of_drug_allergy, "History of Drug Allergy", new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.History_of_drug_allergy, new { @class = "form-control", rows = "3", @Value = Model?.History_of_drug_allergy ?? "" })
                                <div class="invalid-feedback">Please provide details of drug allergy history if applicable.</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Parent Details Card -->
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title">Parent Details</h3>
                    <div class="row">
                        <!-- Column 1 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.FathersName, "Father Name", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.FathersName, new { @class = "form-control", required = "required", @Value = Model?.FathersName ?? "", pattern = @"^[A-Za-z\s]+$", title = "Name must contain only letters and spaces." })
                                <div class="invalid-feedback">Please provide a valid father's name (letters and spaces only).</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.MothersName, "Mother Name", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.MothersName, new { @class = "form-control", required = "required", @Value = Model?.MothersName ?? "", pattern = @"^[A-Za-z\s]+$", title = "Name must contain only letters and spaces." })
                                <div class="invalid-feedback">Please provide a valid mother's name (letters and spaces only).</div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Parents Income Category</label>
                                <div class="checkbox-group-no-scroll" id="parentsIncomeGroup">
                                    @foreach (var income in new[] { "Below 5 Lacs", "Below 8 Lacs", "Below 10 Lacs", "Above 10 Lacs" })
                                    {
                                        <div>
                                            <input type="checkbox" name="Parents_Income_Category_Checkbox" value="@income" @(Model != null && Model.Parents_Income_Category == income ? "checked" : "") class="income-checkbox" />
                                            <label>@income</label>
                                        </div>
                                    }
                                </div>
                                @Html.HiddenFor(m => m.Parents_Income_Category, new { @id = "Parents_Income_Category" })
                                <div class="invalid-feedback" id="parentsIncomeError">Please select exactly one income category.</div>
                            </div>
                        </div>
                        <!-- Column 2 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Father_Mobile_No, "Father's Mobile No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Father_Mobile_No, new { @class = "form-control", required = "required", @Value = Model?.Father_Mobile_No ?? "", pattern = @"^\d{10}$", title = "Mobile number must be exactly 10 digits.", maxlength = "10" })
                                <div class="invalid-feedback">Please provide a valid 10-digit mobile number for the father.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Mother_Mobile_No, "Mother's Mobile No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Mother_Mobile_No, new { @class = "form-control", required = "required", @Value = Model?.Mother_Mobile_No ?? "", pattern = @"^\d{10}$", title = "Mobile number must be exactly 10 digits.", maxlength = "10" })
                                <div class="invalid-feedback">Please provide a valid 10-digit mobile number for the mother.</div>
                            </div>
                        </div>
                        <!-- Column 3 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.FathersEmail, "Father's Email", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.FathersEmail, new { @class = "form-control", type = "email", required = "required", @Value = Model?.FathersEmail ?? "", pattern = @"^[a-zA-Z0-9._%+-]+@gmail\.com$" })
                                <div class="invalid-feedback">Please provide a valid Gmail address for the father (e.g., username@gmail.com).</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.MothersEmail, "Mother's Email", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.MothersEmail, new { @class = "form-control", type = "email", required = "required", @Value = Model?.MothersEmail ?? "", pattern = @"^[a-zA-Z0-9._%+-]+@gmail\.com$" })
                                <div class="invalid-feedback">Please provide a valid Gmail address for the mother (e.g., username@gmail.com).</div>
                            </div>
                        </div>
                        <!-- Column 4 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Father_Age, "Father's Age", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Father_Age, new { @class = "form-control", type = "number", required = "required", @Value = Model?.Father_Age, min = "18", max = "100" })
                                <div class="invalid-feedback">Please provide a valid age for the Father (18-100).</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Mother_Age, "Mother's Age", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Mother_Age, new { @class = "form-control", type = "number", required = "required", @Value = Model?.Mother_Age, min = "18", max = "100" })
                                <div class="invalid-feedback">Please provide a valid age for the mother (18-100).</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Local Guardian Details Card -->
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title">Guardian Details</h3>
                    <div class="row">
                        <!-- Column 1 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianName, "Guardian Name", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.LocalGuardianName, new { @class = "form-control", required = "required", @Value = Model?.LocalGuardianName ?? "", pattern = @"^[A-Za-z\s]+$", title = "Name must contain only letters and spaces." })
                                <div class="invalid-feedback">Please provide a valid guardian's name (letters and spaces only).</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianOccupation, "Guardian's Occupation", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.LocalGuardianOccupation, new { @class = "form-control", required = "required", @Value = Model?.LocalGuardianOccupation ?? "" })
                                <div class="invalid-feedback">Please provide the guardian's occupation.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianAddress_City, "City", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.LocalGuardianAddress_City, new { @class = "form-control", required = "required", @Value = Model?.LocalGuardianAddress_City ?? "" })
                                <div class="invalid-feedback">Please provide the city.</div>
                            </div>
                        </div>
                        <!-- Column 2 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianContactNo, "Guardian's Contact No", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.LocalGuardianContactNo, new { @class = "form-control", required = "required", @Value = Model?.LocalGuardianContactNo ?? "", pattern = @"^\d{10}$", title = "Contact number must be exactly 10 digits.", maxlength = "10" })
                                <div class="invalid-feedback">Please provide a valid 10-digit contact number for the guardian.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianAge, "Guardian's Age", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.LocalGuardianAge, new { @class = "form-control", type = "number", required = "required", @Value = Model?.LocalGuardianAge, min = "18", max = "100" })
                                <div class="invalid-feedback">Please provide a valid age for the guardian (18-100).</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianAddress_Pincode, "Pincode", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.LocalGuardianAddress_Pincode, new { @class = "form-control", required = "required", @Value = Model?.LocalGuardianAddress_Pincode ?? "", pattern = @"^\d{6}$", title = "Pincode must be exactly 6 digits.", maxlength = "6" })
                                <div class="invalid-feedback">Please provide a valid 6-digit pincode.</div>
                            </div>
                        </div>
                        <!-- Column 3 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianEmail, "Guardian's Email", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.LocalGuardianEmail, new { @class = "form-control", type = "email", required = "required", @Value = Model?.LocalGuardianEmail ?? "", pattern = @"^[a-zA-Z0-9._%+-]+@gmail\.com$" })
                                <div class="invalid-feedback">Please a valid Gmail address for the guardian (e.g., username@gmail.com).</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianResidentialAddress, "Guardian's Residential Address", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.LocalGuardianResidentialAddress, new { @class = "form-control", required = "required", @Value = Model?.LocalGuardianResidentialAddress ?? "" })
                                <div class="invalid-feedback">Please provide the guardian's residential address.</div>
                            </div>
                        </div>
                        <!-- Column 4 -->
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianRelationWithStudent, "Guardian's Relation With Student", new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.LocalGuardianRelationWithStudent, new SelectList(new[]
                                {
                                    "Father", "Mother", "Brother", "Sister", "Uncle", "Aunt", "Cousin", "Grandfather", "Grandmother", "Other"
                                }, Model?.LocalGuardianRelationWithStudent), "-- Select Relation --", new { @class = "form-control", required = "required" })
                                <div class="invalid-feedback">Please select the guardian's relation with the student.</div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.LocalGuardianAddress_State, "State", new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.LocalGuardianAddress_State, new SelectList(new List<string>
                                {
                                    "Andhra Pradesh", "Arunachal Pradesh", "Assam", "Bihar", "Chhattisgarh", "Goa", "Gujarat",
                                    "Haryana", "Himachal Pradesh", "Jharkhand", "Karnataka", "Kerala", "Madhya Pradesh",
                                    "Maharashtra", "Manipur", "Meghalaya", "Mizoram", "Nagaland", "Odisha", "Punjab",
                                    "Rajasthan", "Sikkim", "Tamil Nadu", "Telangana", "Tripura", "Uttar Pradesh",
                                    "Uttarakhand", "West Bengal", "Andaman and Nicobar Islands", "Chandigarh",
                                    "Dadra and Nagar Haveli and Daman and Diu", "Delhi", "Jammu and Kashmir",
                                    "Ladakh", "Lakshadweep", "Puducherry"
                                }, Model?.LocalGuardianAddress_State), "-- Select State --", new { @class = "form-select", required = "required", id = "LocalGuardianAddress_State" })
                                <div class="invalid-feedback">Please select a state.</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="text-center mt-4">
                <button type="button" class="btn btn-success" id="savePersonalDetails">Save Personal Details</button>
                <a href="@Url.Action("Index", "Student")" class="btn btn-secondary ms-2">Back to Dashboard</a>
            </div>
        }

        <!-- Confirmation Modal -->
        <div class="modal fade" id="confirmSubmitModal" tabindex="-1" aria-labelledby="confirmSubmitModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="confirmSubmitModalLabel">Confirm Submission</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        Please recheck your details before submitting. Are you sure you want to save your personal details?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-success" id="confirmSubmit">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Prevent default HTML5 validation on page load
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('personalDetailsForm');
            form.querySelectorAll('.form-control, .form-select, .checkbox-group, .checkbox-group-no-scroll').forEach(element => {
                element.classList.remove('is-invalid');
                const feedback = element.nextElementSibling;
                if (feedback && feedback.classList.contains('invalid-feedback')) {
                    feedback.style.display = 'none';
                }
            });
        });

        // Real-time validation for fields
        function validateField(input) {
            const feedback = input.nextElementSibling;
            const isFeedback = feedback && feedback.classList.contains('invalid-feedback');
            let isValid = true;

            // Skip validation for empty fields unless required and submitting
            if (!input.value && !input.hasAttribute('required')) {
                input.classList.remove('is-invalid');
                if (isFeedback) feedback.style.display = 'none';
                return true;
            }

            // Check pattern and exact length for fields with regex
            if (input.pattern && input.value) {
                const regex = new RegExp(`^${input.pattern}$`);
                isValid = regex.test(input.value);
                // Enforce exact length for specific fields
                const id = input.id;
                if (['StudentContactNo', 'stu_whatsappnum', 'Father_Mobile_No', 'Mother_Mobile_No', 'LocalGuardianContactNo'].includes(id)) {
                    isValid = isValid && input.value.length === 10;
                } else if (id === 'AadharNumber') {
                    isValid = isValid && input.value.length === 12;
                } else if (['ResidentialAddress_Pincode', 'StudentAddress_Communication_Pincode', 'LocalGuardianAddress_Pincode'].includes(id)) {
                    isValid = isValid && input.value.length === 6;
                }
            }

            // Additional checks for numeric fields
            if (input.type === 'number' && input.value) {
                const min = input.min ? parseFloat(input.min) : null;
                const max = input.max ? parseFloat(input.max) : null;
                const value = parseFloat(input.value);
                if (isNaN(value) || (min !== null && value < min) || (max !== null && value > max)) {
                    isValid = false;
                }
            }

            // Special check for date fields (e.g., DOB not in future)
            if (input.type === 'date' && input.value) {
                const maxDate = input.max ? new Date(input.max) : new Date();
                const inputDate = new Date(input.value);
                if (inputDate > maxDate) {
                    isValid = false;
                }
            }

            // Check dropdowns for placeholder selection
            if (input.tagName === 'SELECT' && input.value === '') {
                isValid = false;
            }

            // Update UI based on validity
            if (!isValid && input.value) {
                input.classList.add('is-invalid');
                if (isFeedback) feedback.style.display = 'block';
            } else {
                input.classList.remove('is-invalid');
                if (isFeedback) feedback.style.display = 'none';
            }
            return isValid;
        }

        // Apply real-time validation to specific fields
        const fieldsToValidateRealTime = [
            'StudentName', 'Student_Name__as_per_10th_grade_sheet_', 'FathersName', 'MothersName', 'LocalGuardianName',
            'StudentContactNo', 'stu_whatsappnum', 'Father_Mobile_No', 'Mother_Mobile_No', 'LocalGuardianContactNo',
            'ResidentialAddress_Pincode', 'StudentAddress_Communication_Pincode', 'LocalGuardianAddress_Pincode',
            'AadharNumber', 'AdmissionYear', 'Mother_Age', 'LocalGuardianAge',
            'StudentEmail', 'FathersEmail', 'MothersEmail', 'LocalGuardianEmail',
            'dob'
        ];

        fieldsToValidateRealTime.forEach(id => {
            const field = document.getElementById(id);
            if (field) {
                field.addEventListener('input', function () {
                    // Enforce letters and spaces for name fields
                    if (['StudentName', 'Student_Name__as_per_10th_grade_sheet_', 'FathersName', 'MothersName', 'LocalGuardianName'].includes(id)) {
                        this.value = this.value.replace(/[^A-Za-z\s]/g, '');
                    }
                    // Enforce numeric input for mobile, pincode, Aadhar
                    if (['StudentContactNo', 'stu_whatsappnum', 'Father_Mobile_No', 'Mother_Mobile_No', 'LocalGuardianContactNo', 'ResidentialAddress_Pincode', 'StudentAddress_Communication_Pincode', 'LocalGuardianAddress_Pincode', 'AadharNumber'].includes(id)) {
                        this.value = this.value.replace(/[^0-9]/g, '');
                        const maxLength = parseInt(this.getAttribute('maxlength') || '0');
                        if (maxLength && this.value.length > maxLength) {
                            this.value = this.value.slice(0, maxLength);
                        }
                    }
                    validateField(this);
                });
            }
        });

        // Real-time validation for other required fields and dropdowns
        document.querySelectorAll('.form-control[required], .form-select[required]').forEach(input => {
            if (!fieldsToValidateRealTime.includes(input.id)) {
                input.addEventListener('input', function () {
                    if (this.value) validateField(this);
                });
                if (input.tagName === 'SELECT') {
                    input.addEventListener('change', function () {
                        validateField(this);
                    });
                }
            }
        });

        // Same Address Checkbox Logic
        const sameAddressCheckbox = document.getElementById('sameAddressCheckbox');
        const residentialFields = {
            address: document.getElementById('PresentResidentialAddress'),
            state: document.getElementById('ResidentialAddress_State'),
            city: document.getElementById('ResidentialAddress_City'),
            pincode: document.getElementById('ResidentialAddress_Pincode')
        };
        const communicationFields = {
            address: document.getElementById('StudentAddress_Communication'),
            state: document.getElementById('StudentAddress_Communication_State'),
            city: document.getElementById('StudentAddress_Communication_City'),
            pincode: document.getElementById('StudentAddress_Communication_Pincode')
        };

        function updateCommunicationFields() {
            if (sameAddressCheckbox.checked) {
                communicationFields.address.value = residentialFields.address.value;
                communicationFields.state.value = residentialFields.state.value;
                communicationFields.city.value = residentialFields.city.value;
                communicationFields.pincode.value = residentialFields.pincode.value;
                Object.values(communicationFields).forEach(field => {
                    field.setAttribute('readonly', 'readonly');
                    field.classList.add('bg-light');
                    field.classList.remove('is-invalid');
                    const feedback = field.nextElementSibling;
                    if (feedback && feedback.classList.contains('invalid-feedback')) {
                        feedback.style.display = 'none';
                    }
                });
            } else {
                Object.values(communicationFields).forEach(field => {
                    field.removeAttribute('readonly');
                    field.classList.remove('bg-light');
                    validateField(field);
                });
            }
        }

        sameAddressCheckbox.addEventListener('change', updateCommunicationFields);

        Object.values(residentialFields).forEach(field => {
            field.addEventListener('input', () => {
                if (sameAddressCheckbox.checked) {
                    updateCommunicationFields();
                }
            });
        });

        // Add new health history input
        document.getElementById('addHealthHistory').addEventListener('click', function () {
            const container = document.getElementById('healthHistoryContainer');
            const newItem = document.createElement('div');
            newItem.className = 'health-history-item';
            newItem.innerHTML = `
                        <input type="text" name="Past_Health_History[]" class="form-control health-history-input" />
                        <button type="button" class="btn btn-danger btn-sm remove-health">Remove</button>
                    `;
            container.appendChild(newItem);
        });

        // Remove health history input
        document.addEventListener('click', function (e) {
            if (e.target.classList.contains('remove-health')) {
                e.target.parentElement.remove();
            }
        });

        // Validate checkbox groups
        function validateCheckboxes(groupId, checkboxClass, errorId) {
            const group = document.getElementById(groupId);
            const checkboxes = group.querySelectorAll(`.${checkboxClass}`);
            const error = document.getElementById(errorId);
            const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;

            if (checkedCount !== 1) {
                group.classList.add('is-invalid');
                error.style.display = 'block';
                return false;
            } else {
                group.classList.remove('is-invalid');
                error.style.display = 'none';
                return true;
            }
        }

        // Handle checkbox groups change for single selection
        document.querySelectorAll('.checkbox-group-no-scroll input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                const name = this.name;
                const groupId = name === 'Work_Experience_Checkbox' ? 'workExperienceGroup' : 'parentsIncomeGroup';
                const checkboxClass = name === 'Work_Experience_Checkbox' ? 'work-experience-checkbox' : 'income-checkbox';
                const errorId = name === 'Work_Experience_Checkbox' ? 'workExperienceError' : 'parentsIncomeError';
                const hiddenFieldId = name === 'Work_Experience_Checkbox' ? 'Work_Experience' : 'Parents_Income_Category';

                // Enforce single selection
                if (this.checked) {
                    const checkboxes = document.querySelectorAll(`input[name="${name}"]`);
                    checkboxes.forEach(cb => {
                        if (cb !== this) {
                            cb.checked = false;
                        }
                    });
                }

                // Update hidden field with selected value
                const selectedValue = this.checked ? this.value : '';
                const hiddenField = document.getElementById(hiddenFieldId);
                if (hiddenField) {
                    hiddenField.value = selectedValue;
                }

                // Validate the group
                validateCheckboxes(groupId, checkboxClass, errorId);
            });
        });

        // Form validation on "Save Personal Details" button click
        document.getElementById('savePersonalDetails').addEventListener('click', function (e) {
            e.preventDefault();
            const form = document.getElementById('personalDetailsForm');
            let isValid = true;

            // Validate all required fields
            form.querySelectorAll('.form-control[required], .form-select[required]').forEach(input => {
                if (!input.value.trim() || (input.tagName === 'SELECT' && input.value === '')) {
                    input.classList.add('is-invalid');
                    const feedback = input.nextElementSibling;
                    if (feedback && feedback.classList.contains('invalid-feedback')) {
                        feedback.style.display = 'block';
                    }
                    isValid = false;
                } else {
                    if (!validateField(input)) {
                        isValid = false;
                    }
                }
            });

            // Validate checkbox groups
            if (!validateCheckboxes('workExperienceGroup', 'work-experience-checkbox', 'workExperienceError')) {
                isValid = false;
            }
            if (!validateCheckboxes('parentsIncomeGroup', 'income-checkbox', 'parentsIncomeError')) {
                isValid = false;
            }

            // Skip optional fields
            const healthContainer = document.getElementById('healthHistoryContainer');
            const allergyGroup = document.getElementById('allergyNamesGroup');
            healthContainer.classList.remove('is-invalid');
            document.getElementById('healthHistoryError').style.display = 'none';
            allergyGroup.classList.remove('is-invalid');
            document.getElementById('allergyNamesError').style.display = 'none';

            // Show modal if valid, else scroll to first error
            if (isValid) {
                const modal = new bootstrap.Modal(document.getElementById('confirmSubmitModal'));
                modal.show();
            } else {
                const firstInvalid = form.querySelector('.is-invalid');
                if (firstInvalid) {
                    firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    if (firstInvalid.tagName !== 'DIV') {
                        firstInvalid.focus();
                    }
                }
            }
        });

        // Form submission on "Confirm" button click
        document.getElementById('confirmSubmit').addEventListener('click', function () {
            const form = document.getElementById('personalDetailsForm');
            form.submit();
        });

        // Age calculation script
        document.addEventListener('DOMContentLoaded', function () {
            const dobInput = document.getElementById('dob');
            const ageInput = document.getElementById('age');

            if (!dobInput) {
                console.error('DOB input (id="dob") not found in the DOM');
            }
            if (!ageInput) {
                console.error('Age input (id="age") not found in the DOM');
            }
            if (!dobInput || !ageInput) {
                return;
            }

            function calculateAge(dobString) {
                const dob = new Date(dobString);
                const today = new Date();
                let age = today.getFullYear() - dob.getFullYear();
                const m = today.getMonth() - dob.getMonth();
                if (m < 0 || (m === 0 && today.getDate() < dob.getDate())) {
                    age--;
                }
                return age;
            }

            if (dobInput.value) {
                ageInput.value = calculateAge(dobInput.value);
            }

            dobInput.addEventListener('change', function () {
                if (dobInput.value) {
                    ageInput.value = calculateAge(dobInput.value);
                    validateField(dobInput);
                }
            });

            updateCommunicationFields();
        });
    </script>
</body>
</html>

@functions {
    public List<SelectListItem> GenerateHeightOptions()
    {
        var options = new List<SelectListItem>();
        for (int feet = 4; feet <= 6; feet++)
        {
            for (int inches = 0; inches <= 12; inches++)
            {
                decimal height = feet + inches / 100.0m;
                string display = $"{feet}' {inches}\"";
                options.Add(new SelectListItem { Text = display, Value = height.ToString("0.00") });
            }
        }
        return options;
    }

    public List<SelectListItem> GenerateWeightOptions()
    {
        var options = new List<SelectListItem>();
        for (decimal weight = 40.0m; weight <= 200.0m; weight += 0.5m)
        {
            options.Add(new SelectListItem { Text = weight.ToString("0.0"), Value = weight.ToString("0.0") });
        }
        return options;
    }
}